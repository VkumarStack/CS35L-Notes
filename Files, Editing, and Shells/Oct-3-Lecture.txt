Emacs contains an interpreter (written in C) for Lisp. Much of Emacs is written in Lisp, with its own
libraries. This is an implementation strategy known as layering: an interpreter written in a lower level
language (i.e. C, C++) is used for an interface language (i.e. Lisp, Javascript).
    For Emacs, as an example, user input (i.e. typed characters) are interpreted by Lisp, which at the 
    lower level is passed through C, which goes to the kernel's library, and so forth.

The Linux shell is meant to be a command language - type a command, output something, and repeat.

Shell Syntax:
    wc $(find . -type f) | tail -n 1

    The $(command) runs the command and output its argument into that part of the text (so in this case, all the files that are found 
    via the find command are arguments to the wc command)

When attempting to run commands in Linux, the shell will default to looking for the command in the $PATH. You can add a directory to the 
path only for that session by doing the command:
    PATH=$PATH:.

The shell has many reserved characters (i.e. < > | ~ ` # $ & * ( ) = [ ] \ ; ' " ? ). When attempting to use these special characters in a
command, quotes should be used.
    - Single quotes will literally interpret the characters within them
    - Double quotes work similarly, but \ and $ are still treated as special characters.

Use single quotes when using grep, as double quotes may interpret characters \ or $ contrary to what is intended to match with grip.

Using grep -E uses an extended version of grep, using extended basic regular expressions. These extended features include:
    - P+ (+ is one or more instances of the previous pattern P)
    - P{2, 5} (2 to 5 instances of the previous pattern in P: PP | PPP | PPPP | PPPPP)
    - P | Q (pattern P OR Q)
    - () (Allows you to group a pattern, i.e. grep -E '(^|[^a-z])link([^a-z]|$)' finds all instances of link that is either at the beginning of the line
    preceded by a SINGLE non-alphabetical character followed by either a SINGLE non alphabetical character or the end of the line)

A file system is a collection of files on a system. Most file structures are tree-based, meaning that files are organized under subtrees of directories. The 
tree substructures are denoted using the '/' character. A directory is just a file that maps filename components (a nonempty sequence of non-'/' characters) to 
files - a lookup table. A regular file is a file that contains a byte sequence. Files can be read from or written to. Special files are files that are built into 
the system (i.e. /dev/null which is a file that is always empty). Symbolic links are single files that contain a string that is commonly interpreted as a filename. 
